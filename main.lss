
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000007a  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000007a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000027  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000118  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007a6  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000678  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000147  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000340  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	19 c0       	rjmp	.+50     	; 0x76 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <avr/wdt.h>

int main(void){
  
  // Watchdog timer disable
  MCUSR=0;
  46:	14 be       	out	0x34, r1	; 52
  wdt_disable(); 
  48:	88 e1       	ldi	r24, 0x18	; 24
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	80 93 60 00 	sts	0x0060, r24
  52:	10 92 60 00 	sts	0x0060, r1
  56:	0f be       	out	0x3f, r0	; 63

  // Set pin 0 as output, 1 as input
  DDRD |= (1 << PIN0);
  58:	50 9a       	sbi	0x0a, 0	; 10

  while (1) {
	PORTD ^= (1<< PIN0);
  5a:	91 e0       	ldi	r25, 0x01	; 1
  5c:	8b b1       	in	r24, 0x0b	; 11
  5e:	89 27       	eor	r24, r25
  60:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	2f e9       	ldi	r18, 0x9F	; 159
  64:	36 e8       	ldi	r19, 0x86	; 134
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	30 40       	sbci	r19, 0x00	; 0
  6c:	80 40       	sbci	r24, 0x00	; 0
  6e:	e1 f7       	brne	.-8      	; 0x68 <main+0x22>
  70:	00 c0       	rjmp	.+0      	; 0x72 <main+0x2c>
  72:	00 00       	nop
  74:	f3 cf       	rjmp	.-26     	; 0x5c <main+0x16>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
